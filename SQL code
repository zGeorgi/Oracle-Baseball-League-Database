-- CREATE TABALES---------
-- Customer table 
CREATE TABLE G_customers ( 
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    first_name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(first_name, '^[A-Za-z ]+$')), 
    last_name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(last_name, '^[A-Za-z ]+$')), 
    street VARCHAR2(80) NOT NULL CHECK (REGEXP_LIKE(street, '^[A-Za-z0-9 ]+$')), 
    post_code VARCHAR2(13) NOT NULL CHECK (REGEXP_LIKE(post_code, '^[A-Za-z0-9]+$')), 
    email VARCHAR2(70) NOT NULL UNIQUE CHECK(REGEXP_LIKE(email, '^[^@]+@[^@]+\\.[^@]{2,}$')),
    phone VARCHAR2(12) CHECK (REGEXP_LIKE(phone, '^\+?[0-9]{10,12}$')), 
    customer_type VARCHAR2(30) NOT NULL CHECK (customer_type IN ('individual', 'team')), 
    rep_id Number 
);

ALTER TABLE G_customers
MODIFY (phone VARCHAR2(15) CHECK (REGEXP_LIKE(phone, '^\+?[0-9]{10,15}$')));
--DONE
CREATE TABLE G_customer_types (
    customer_type_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type_name VARCHAR2(50) NOT NULL UNIQUE
);

DROP TABLE G_customer_types;

-- Team table 2 DONE
CREATE TABLE G_teams (
    team_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(50) NOT NULL UNIQUE CHECK (REGEXP_LIKE(name, '^[A-Za-z ]+$')), 
    number_of_players NUMBER NOT NULL CHECK (number_of_players > 0), 
    customer_id NUMBER NOT NULL,
    discount_id NUMBER
);

-- Products table 3 DONE
CREATE TABLE G_products (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(name, '^[A-Za-z ]+$')), 
    description VARCHAR2(150) NOT NULL CHECK (REGEXP_LIKE(description, '^[A-Za-z0-9,. ]+$')), 
    price NUMBER(10, 2) NOT NULL CHECK (price > 0), 
    quantity_in_stock NUMBER NOT NULL CHECK (quantity_in_stock >= 0) 
);

-- add column  
ALTER TABLE G_products
ADD is_active CHAR(1) DEFAULT 'Y' NOT NULL CHECK (is_active IN ('Y', 'N'));

-- deactivate Product 'soft delete'
UPDATE G_products
SET is_active = 'N'
WHERE product_id = 123; -- replace with existing id
-- OR Restrict deletion

-- prevent product deletion if there is a reference in order_products
CREATE OR REPLACE TRIGGER prevent_product_deletion
BEFORE DELETE ON G_products
FOR EACH ROW
BEGIN
    -- Prevent deletion by raising an application error
    RAISE_APPLICATION_ERROR(-20001, 'Deleting products is not allowed.');
END;



-- Orders table 
CREATE TABLE G_orders (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    order_date DATE DEFAULT SYSDATE NOT NULL, 
	order_type VARCHAR2(20) DEFAULT 'Normal' NOT NULL CHECK (order_type IN ('Normal', 'Fast', 'Express')),
    status VARCHAR2(20) DEFAULT 'Pending' NOT NULL CHECK (status IN ('Pending', 'Done', 'Cancelled')),
    customer_id NUMBER NOT NULL 
    );

-- Drop column	DONE 
ALTER TABLE G_orders
DROP COLUMN order_type; 


-- prevent order deletion
CREATE OR REPLACE TRIGGER prevent_order_deletion
BEFORE DELETE ON G_orders
FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'Deleting orders is not allowed.');
END;

-- Order_Products table 5 DONE
CREATE TABLE G_Order_Products (
    order_product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    quantity NUMBER NOT NULL CHECK (quantity > 0), 
    product_id NUMBER NOT NULL, 
    order_id NUMBER NOT NULL
);

-- Discounts table 6
CREATE TABLE G_Discounts (
    discount_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    description VARCHAR2(150) CHECK (REGEXP_LIKE(description, '^[A-Za-z0-9,. ]+$')), 
    percentage NUMBER(3, 2) DEFAULT 0.00 NOT NULL CHECK (percentage >= 0 AND percentage <= 100), 
    min_players NUMBER NOT NULL CHECK (min_players >= 1) 
);

 
CREATE TABLE G_Complaints (
    complaint_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    description VARCHAR2(150) DEFAULT 'No description' NOT NULL CHECK (REGEXP_LIKE(description, '^[A-Za-z0-9,. ]+$')), 
    complaint_date DATE DEFAULT SYSDATE NOT NULL, 
    order_id NUMBER NOT NULL, 
    sales_rep_id NUMBER NOT NULL 
);


  
CREATE TABLE G_Sales_Representatives (
    rep_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    first_name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(first_name, '^[A-Za-z]+$')), 
    last_name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(last_name, '^[A-Za-z]+$')), 
    street VARCHAR2(80) NOT NULL CHECK (REGEXP_LIKE(street, '^[A-Za-z0-9 ]+$')), 
    post_code VARCHAR2(13) NOT NULL CHECK (REGEXP_LIKE(post_code, '^[A-Za-z0-9]+$')), 
    email VARCHAR2(80) NOT NULL UNIQUE CHECK(REGEXP_LIKE(email, '^[^@]+@[^@]+\\.[^@]{2,}$')), 
    phone VARCHAR2(15) NOT NULL CHECK (REGEXP_LIKE(phone, '^\+?[0-9]{10,15}$')) 
);


 
ALTER TABLE G_Sales_Representatives 
ADD is_active CHAR(1) DEFAULT 'Y' NOT NULL CHECK (is_active IN ('Y', 'N'));

-- Mark a sales representative as inactive
UPDATE G_Sales_Representatives 
SET is_active = 'N'
WHERE rep_id = 123;

-- PREVENT SALES REP DELETION
CREATE OR REPLACE TRIGGER prevent_sales_rep_deletion
BEFORE DELETE ON G_Sales_Representatives 
FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'Deleting sales representatives is not allowed.');
END;

-- Inventory_Lists TABLE 9
  
CREATE TABLE G_Inventory_Lists (
    inventory_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    cost_per_unit NUMBER NOT NULL CHECK (cost_per_unit > 0), 
    units_in_stock NUMBER NOT NULL CHECK (units_in_stock >= 0), 
    items_per_unit NUMBER NOT NULL CHECK (items_per_unit >= 1), 
    product_id NUMBER NOT NULL 
);

-- FOREIGN KEY CONSTARINS
-- Add foreign key for Customers to Sales_Representatives (rep_id) done
ALTER TABLE G_Customers
ADD CONSTRAINT fk_customers_rep FOREIGN KEY (rep_id) REFERENCES G_Sales_Representatives (rep_id);

-- Add foreign key for Teams to Customers (customer_id) DONE 
ALTER TABLE G_Teams
ADD CONSTRAINT fk_teams_customer FOREIGN KEY (customer_id) REFERENCES G_Customers (customer_id);


-- Add foreign key for Teams to Discounts (discount_id) DONE 
ALTER TABLE G_Teams
ADD CONSTRAINT fk_teams_discount FOREIGN KEY (discount_id) REFERENCES G_Discounts (discount_id);


-- Add foreign key for Orders to Customers (customer_id) DONE
ALTER TABLE G_Orders
ADD CONSTRAINT fk_orders_customer FOREIGN KEY (customer_id) REFERENCES G_Customers (customer_id);

-- Add foreign key for Order_Products to Orders (order_id)DONE
ALTER TABLE G_Order_Products
ADD CONSTRAINT fk_order_products_order FOREIGN KEY (order_id) REFERENCES G_Orders (order_id);

-- Add foreign key for Order_Products to Products (product_id) DONE 
ALTER TABLE G_Order_Products
ADD CONSTRAINT fk_order_products_product FOREIGN KEY (product_id) REFERENCES G_Products (product_id);

-- Add foreign key for Complaints to Orders (order_id) DONE 
ALTER TABLE G_Complaints
ADD CONSTRAINT fk_complaints_order FOREIGN KEY (order_id) REFERENCES G_Orders (order_id);

-- Add foreign key for Complaints to Sales_Representatives (sales_rep_id) DONE
ALTER TABLE G_Complaints
ADD CONSTRAINT fk_complaints_rep FOREIGN KEY (sales_rep_id) REFERENCES G_Sales_Representatives (rep_id);

-- Add foreign key for Inventory_Lists to Products (product_id) DONE
ALTER TABLE G_Inventory_Lists
ADD CONSTRAINT fk_inventory_product FOREIGN KEY (product_id) REFERENCES G_Products (product_id);
